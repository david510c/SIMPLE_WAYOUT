# SIMPLE_WAYOUT Production Dockerfile (Using Pre-built Compositor Image)
# This is the simplest and most reliable approach

# ==============================================================================
# Stage 1: Build frontend
# ==============================================================================
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Install dependencies
COPY frontend/package*.json ./
RUN npm ci

# Build frontend
COPY frontend/ ./
RUN npm run build

# ==============================================================================
# Stage 2: Build backend
# ==============================================================================
FROM node:18-alpine AS backend-builder

WORKDIR /app/backend

# Install dependencies
COPY backend/package*.json ./
RUN npm ci

# Build backend
COPY backend/ ./
RUN npm run build

# ==============================================================================
# Stage 3: Final production image
# ==============================================================================
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    nodejs \
    npm \
    docker.io \
    && rm -rf /var/lib/apt/lists/*

# Copy built frontend
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# Copy built backend
COPY --from=backend-builder /app/backend/dist ./backend/dist
COPY --from=backend-builder /app/backend/node_modules ./backend/node_modules

# Copy runtime configuration
COPY applications.json ./

# Create startup script that uses pre-built compositor image
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash
set -e

echo "========================================="
echo "Starting SIMPLE_WAYOUT"
echo "========================================="

# Check if compositor-proxy container is already running
if docker ps --format '{{.Names}}' | grep -q '^compositor-proxy$'; then
    echo "âœ“ Compositor-proxy already running"
else
    echo "Starting compositor-proxy container..."
    docker run -d \
        --name compositor-proxy \
        --network host \
        --device /dev/dri/renderD128:/dev/dri/renderD128 \
        david510c/greenfield-base:v1.5-diagnostic-fixed-v4 \
        compositor-proxy-cli \
            --bind-port 8081 \
            --bind-ip 0.0.0.0 \
            --allow-origin '*' \
            --encoder x264
    
    echo "âœ“ Compositor-proxy started"
    echo "Waiting for compositor to initialize..."
    sleep 5
fi

# Start backend server
echo "Starting backend server..."
cd /app/backend
PORT=8080 NODE_ENV=production node dist/server.js

EOF

RUN chmod +x /app/start.sh

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Start
CMD ["/app/start.sh"]
