# SIMPLE_WAYOUT Dockerfile for Two-Container Setup
# This version does NOT start compositor-proxy (runs in separate container)

# ==============================================================================
# Stage 1: Build frontend
# ==============================================================================
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Install dependencies
COPY frontend/package.json frontend/package-lock.json ./
RUN npm ci

# Build frontend
COPY frontend/ ./
RUN npm run build

# ==============================================================================
# Stage 2: Build backend
# ==============================================================================
FROM node:18-alpine AS backend-builder

WORKDIR /app/backend

# Install dependencies
COPY backend/package.json backend/package-lock.json ./
RUN npm ci

# Build backend
COPY backend/ ./
RUN npm run build

# ==============================================================================
# Stage 3: Final production image (Backend + Frontend only, NO compositor)
# ==============================================================================
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# Set working directory
WORKDIR /app

# Install runtime dependencies (minimal - no compositor dependencies)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 18.x from NodeSource
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Copy built frontend
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# Copy built backend
COPY --from=backend-builder /app/backend/dist ./backend/dist
COPY --from=backend-builder /app/backend/node_modules ./backend/node_modules
COPY --from=backend-builder /app/backend/package.json ./backend/package.json

# Copy runtime configuration (backend expects it at /app/applications.json)
COPY applications.json ./applications.json

# Copy backend-only startup script
COPY start-backend-only.sh /app/start.sh
RUN chmod +x /app/start.sh

# Expose port (only backend)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Start backend only (compositor runs in separate container)
CMD ["/app/start.sh"]
